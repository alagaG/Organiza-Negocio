/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package projeto.a3.view;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import projeto.a3.controller.NoteController;
import projeto.a3.main.MainView;
import projeto.a3.model.NoteModel;
import projeto.a3.model.PeopleModel;

/**
 *
 * @author pc
 */
public class NoteView extends javax.swing.JPanel {

    private static NoteView instance;
    private NoteController controller = new NoteController(); 
    private NoteModel[] data = new NoteModel[0];
    
    /**
     * Creates new form a
     */
    public NoteView() {
        instance = this;
        initComponents();
        updateView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JTextField();
        clientSelector = new javax.swing.JComboBox<>();
        mainPanel = new javax.swing.JScrollPane();
        textEditor = new javax.swing.JEditorPane();
        sidePanel = new javax.swing.JScrollPane();
        noteList = new javax.swing.JList<>();
        newButtom = new javax.swing.JButton();
        deleteAllButtom = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        deleteButtom = new javax.swing.JButton();

        title.setToolTipText("");
        title.setEnabled(false);

        clientSelector.setEnabled(false);

        mainPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        textEditor.setEnabled(false);
        mainPanel.setViewportView(textEditor);

        noteList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                noteListValueChanged(evt);
            }
        });
        sidePanel.setViewportView(noteList);

        newButtom.setText("Novo");
        newButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtomActionPerformed(evt);
            }
        });

        deleteAllButtom.setText("Limpar");
        deleteAllButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtomActionPerformed(evt);
            }
        });

        saveButton.setText("Salvar");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Limpar");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        deleteButtom.setText("Deletar");
        deleteButtom.setEnabled(false);
        deleteButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButtom, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAllButtom))
                    .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 155, Short.MAX_VALUE)
                        .addComponent(deleteButtom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addComponent(mainPanel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainPanel))
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(clearButton)
                    .addComponent(newButtom)
                    .addComponent(deleteButtom)
                    .addComponent(deleteAllButtom))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteAllButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtomActionPerformed
        if (JOptionPane.YES_OPTION != JOptionPane.showConfirmDialog(this, "Quer mesmo deletar todas as notas?")) return;
        controller.deleteAll(new NoteModel(0, MainView.getUser().getID(), 0, "", ""));
        updateView();
    }//GEN-LAST:event_deleteAllButtomActionPerformed

    private void deleteButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtomActionPerformed
        if (JOptionPane.YES_OPTION != JOptionPane.showConfirmDialog(this, "Quer mesmo deletar essa nota?")) return;
        controller.delete(data[noteList.getSelectedIndex()]);
        updateView();
    }//GEN-LAST:event_deleteButtomActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int noteIndex = noteList.getSelectedIndex();
        NoteModel oldData = data[noteIndex];
        NoteModel newData = new NoteModel(
                oldData.getID(), 
                oldData.getUserID(), 
                clientSelector.getSelectedIndex() > 0 ? CostumerView.getInstance().getData()[clientSelector.getSelectedIndex() - 1].getID() : 0, 
                title.getText(), 
                textEditor.getText());
        controller.update(oldData, newData);
        updateView();
        noteList.setSelectedIndex(noteIndex);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        textEditor.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void newButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtomActionPerformed
        controller.create(new NoteModel(0, MainView.getUser().getID(), 0, "Nova Nota", ""));
        updateView();
    }//GEN-LAST:event_newButtomActionPerformed

    private void noteListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_noteListValueChanged
        if (evt.getValueIsAdjusting()) {
            saveButton.setEnabled(false);
            deleteButtom.setEnabled(false);
            clearButton.setEnabled(false);
            clientSelector.setEnabled(false);
        } else {
            int noteIndex = noteList.getSelectedIndex();
            boolean selected = noteIndex > -1;
            saveButton.setEnabled(selected);
            deleteButtom.setEnabled(selected);
            clearButton.setEnabled(selected);
            title.setEnabled(selected);
            textEditor.setEnabled(selected);
            title.setText(selected ? data[noteIndex].getTitle() : "");
            clientSelector.setEnabled(selected);
            DefaultComboBoxModel<String> clientModel = new DefaultComboBoxModel();
            clientSelector.setModel(clientModel);
            clientModel.addElement("");
            PeopleModel[] costumerData = CostumerView.getInstance().getData();
            for (int i=0; i<costumerData.length; i++) {
                PeopleModel costumer = costumerData[i];
                clientModel.addElement(costumer.getName());
            }
            
            for (int i=0; i<costumerData.length; i++) {
                PeopleModel costumer = costumerData[i];
                if (costumer.getID() > 0 && (selected ? data[noteIndex].getClientID() : 0) == costumer.getID()) clientSelector.setSelectedIndex(i + 1);
            }
            textEditor.setText(selected ? data[noteIndex].getContent() : "");
        }
    }//GEN-LAST:event_noteListValueChanged

    public void updateView() {
        data = controller.readAll();
        
        DefaultListModel listModel = new DefaultListModel();
        noteList.setModel(listModel);

        for (int i=0; i<data.length; i++) {
            listModel.add(i, data[i].getTitle());
        }
    }
    
    public static NoteView getInstance() {
        return instance;
    }
    
    public NoteModel[] getData() {
        return data.clone();
    }
    
    public NoteController getController() {
        return controller;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> clientSelector;
    private javax.swing.JButton deleteAllButtom;
    private javax.swing.JButton deleteButtom;
    private javax.swing.JScrollPane mainPanel;
    private javax.swing.JButton newButtom;
    private javax.swing.JList<String> noteList;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane sidePanel;
    private javax.swing.JEditorPane textEditor;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables
}
